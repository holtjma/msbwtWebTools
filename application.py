'''
Author: James Holt
Contact: holtjma@cs.unc.edu
This file contains the server-side layout of all tools that Flask will use for accessing the BWT tools
'''

from flask import Flask
from flask import jsonify
from flask import request
from flask import Response

from MUS import util
from MUSCython import MultiStringBWTCython as MSBWT

import locale
locale.setlocale(locale.LC_ALL, 'en_US')
import markup
from markup import oneliner as element

VERSION = "0.1.0"

# EB looks for an 'application' callable by default.
application = Flask(__name__)

def addTitleToPage(content):
    '''
    This useful function creates a title and wraps it around the actual contents generated by the various tools.  This is
    fairly basic right now as functional BWT tools is the priority.
    @param content - the actual content to enclose
    @return - a string of the webpage for Flask to serve that has both the passed in content and things like
        menus, home page, CSS related things, etc. 
    '''
    title = "Multi-String BWT Tools"
    menuItems = [("Home", "/"),
        ("K-mer Search", "./msCompare"),
        ("Allele Search", "./msAllele"),
        ("Targeted Assembly", "./msTarget"),
        ("Mass Query", "./msMassQuery"),
        ("Batch Query", "./msBatchQuery"),
        ("Help", "./msHelp")]
    
    #TODO: tinker with these until happy
    #bodySettings = {'topmargin':"10", 'leftmargin':"10", 'bgcolor':"#cccccc"}
    
    #this puts a buffer column to the left and right of each entry in the menu
    columns = len(menuItems)+2
    if len(menuItems)==0:
        columns=1
    
    ratio = "%d%%" % (96/columns)
    
    #start the page
    page = markup.page()
    page.init(title=title)#, bodyattrs=bodySettings)
    page.br()
    page.add("<link rel=\"stylesheet\" href=\"./static/css/title.css\">\n")
    
    #page.table(class_="main", align="center", cellspacing="3", cellpadding="3", bgcolor="#ffffff", style="width: 90%;")
    page.table(class_="main")
    #this is where the page header goes
    page.tr()
    #page.td(colspan=str(columns), class_="PageBanner",background="header.png")
    page.td(colspan=str(columns))
    page.div(element.h1(title), align="center")
    page.td.close()
    page.tr.close()
    
    #automation for generating each item in the menu at the top of the page
    page.tr(class_="toplinks")#bgcolor="#7BAFD4")
    page.td("", class_="flanks", width="2%%")
    for text, link in menuItems:
        #page.td(element.a(text, href=link), width=ratio, style="border: 1px solid black;", valign="middle", align="center")
        page.td(element.a(text, href=link), class_="internal", width=ratio)#, style="border: 1px solid black;", valign="middle", align="center")
    if columns >=2:
        page.td("", class_="flanks", width="2%%")
    page.tr.close()
    
    #here's where the important stuff goes
    page.tr()
    page.td(colspan=str(columns), valign="top")
    page.add(str(content))
    page.td.close()
    page.tr.close()
    page.table.close()
    
    #here's info from before, choose to add or not add I suppose
    page.br()
    page.div("<a href=\"https://github.com/holtjma/msbwtWebTools\">MSBWT Web Tools</a> version %s: built using <a href=\"https://github.com/holtjma/msbwt\">msbwt</a> version %s and <a href=\"http://markup.sourceforge.net\">markup</a> version %s" % (VERSION, util.VERSION, markup.__version__), align = "center")
    page.div("&copy; 2016 James Holt and Leonard McMillan", align="center")
    page.br()
    
    return str(page)

@application.route('/')
def msHomeCaller():
    from MsbwtPages import msHome
    return addTitleToPage(msHome.GET())

@application.route('/msCompare', methods=['GET', 'POST'])
def msCompareCaller():
    from MsbwtPages import msCompare
    if request.method == 'GET':
        return addTitleToPage(msCompare.GET())
    elif request.method == 'POST':
        datasets = request.form.getlist("dataset")
        pattern = request.form.get("pattern")
        return addTitleToPage(msCompare.POST(datasets, pattern))

@application.route('/msAllele', methods=['GET', 'POST'])
def msAlleleCaller():
    from MsbwtPages import msAllele
    if request.method == 'GET':
        return addTitleToPage(msAllele.GET())
    elif request.method == 'POST':
        datasets = request.form.getlist("dataset")
        pattern = request.form.get("pattern")
        return addTitleToPage(msAllele.POST(datasets, pattern))

@application.route('/msTarget', methods=['GET'])
def msTargetCaller():
    from MsbwtPages import msTarget
    return addTitleToPage(msTarget.GET())

@application.route('/followPath', methods=['POST'])
def followPathCaller():
    from MsbwtPages import followPath
    dataset = str(request.form.get("dataset"))
    kmer = str(request.form.get("kmerText"))
    kmerThreshold = int(request.form.get("kmerThreshold"))
    return Response(followPath.getPath(dataset, kmer, kmerThreshold), mimetype="application/json")

@application.route('/msMassQuery')
def msMassQueryCaller():
    from MsbwtPages import msMassQuery
    return addTitleToPage(msMassQuery.GET())

@application.route('/massQuery', methods=['POST'])
def massQueryCaller():
    from MsbwtPages import massQuery
    dataset = str(request.form.get("dataset"))
    jsonQueries = str(request.form.get("kmerQueries"))
    forward = str(request.form.get("forwardEnabled"))
    revComp = str(request.form.get("revCompEnabled"))
    return Response(massQuery.getMassQueryResults(dataset, jsonQueries, forward, revComp), mimetype="application/json")

@application.route('/msBatchQuery')
def msBatchQueryCaller():
    from MsbwtPages import msBatchQuery
    return addTitleToPage(msBatchQuery.GET())

@application.route('/batchQuery', methods=['POST'])
def batchQueryCaller():
    from MsbwtPages import batchQuery
    datasets = str(request.form.get("datasets"))
    jsonQueries = str(request.form.get("kmerQueries"))
    forward = str(request.form.get("forwardEnabled"))
    revComp = str(request.form.get("revCompEnabled"))
    return Response(batchQuery.getBatchQueryResults(datasets, jsonQueries, forward, revComp), mimetype="application/json")

@application.route('/msHelp')
def msHelpCaller():
    from MsbwtPages import msHelp
    return addTitleToPage(msHelp.GET())
    
# run the app.
if __name__ == "__main__":
    # Setting debug to True enables debug output. This line should be
    # removed before deploying a production app.
    application.debug = True
    application.run()
